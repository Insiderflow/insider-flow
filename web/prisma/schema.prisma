// Reuse the same schema so Prisma Client types match DB
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Politician {
  id        String   @id @db.Text
  name      String
  party     String?
  chamber   String?
  state     String?
  createdAt DateTime  @default(now()) @map("created_at")
  trades    Trade[]
  watchlist UserWatchlist[]
}

model Issuer {
  id         String   @id @db.Text
  ticker     String?  @db.Text
  name       String
  sector     String?
  country    String?
  createdAt  DateTime  @default(now()) @map("created_at")
  trades     Trade[]
  @@index([ticker])
}

model Trade {
  id              String    @id @db.Text
  politicianId    String    @map("politician_id")
  issuerId        String    @map("issuer_id")
  publishedAt     DateTime? @map("published_at")
  tradedAt        DateTime  @map("traded_at")
  filedAfterDays  Int?      @map("filed_after_days")
  owner           String?
  type            String
  sizeMin         Decimal?  @map("size_min")
  sizeMax         Decimal?  @map("size_max")
  price           Decimal?
  sourceUrl       String?   @map("source_url")
  raw             Json?
  createdAt       DateTime  @default(now()) @map("created_at")
  politician      Politician @relation(fields: [politicianId], references: [id])
  issuer          Issuer     @relation(fields: [issuerId], references: [id])
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  passwordHash            String    @map("password_hash")
  emailVerified           Boolean   @default(false) @map("email_verified")
  emailVerificationToken  String?   @map("email_verification_token")
  passwordResetToken      String?   @map("password_reset_token")
  passwordResetExpires    DateTime? @map("password_reset_expires")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  notificationSettings    Json?     @map("notification_settings")
  watchlist               UserWatchlist[]
  sessions                Session[]
}

model UserWatchlist {
  userId        String     @map("user_id")
  politicianId  String     @map("politician_id")
  createdAt     DateTime   @default(now()) @map("created_at")
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  politician    Politician @relation(fields: [politicianId], references: [id], onDelete: Cascade)
  
  @@id([userId, politicianId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}


